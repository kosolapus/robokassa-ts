import { PaymentMethod } from '../dict/payment-method';
import { Language } from '../dict/language';
import { Prefixes } from '../dict/prefixes';
import { Receipt } from './receipt';

type RequiredFields = {
  /**
   * Идентификатор магазина в Robokassa,
   * который вы придумали при создании магазина.
   */
  MerchantLogin: string;
  /**
   * Требуемая к получению сумма (буквально — стоимость заказа, сделанного клиентом).
   * Формат представления — число, разделитель — точка, например: 123.45.
   * Сумма должна быть указана в рублях.
   */
  OutSum: number | string;
  /**
   * Описание покупки, можно использовать только символы английского или
   * русского алфавита, цифры и знаки препинания. Максимальная длина —
   * 100 символов. Эта информация отображается в интерфейсе Robokassa
   * на платежной странице и в личном кабинете. Корректность отображения зависит
   * от необязательного параметра Encoding
   */
  Description?: string;

  /**
   * Контрольная сумма — хэш, число в 16-ричной форме и любом регистре
   * (0-9, A-F), рассчитанное методом указанным в Технических настройках
   * магазина. Рассчитывается по базе, содержащей следующие параметры,
   * разделенные символом: с добавлением Пароль#1 — (этот пароль Вы придумали,
   * на этапе заполнения раздела Технические настройки)
   */
  SignatureValue: string;

  /**
   * Тестовый режим предназначен для отладки взаимодействия между магазином и
   * сервисом ROBOKASSA и особенно полезен для магазина, который еще не был
   * активирован.
   */
  IsTest?: 1 | 0;
};

type OptionalFields = {
  /**
   * Предлагаемый способ оплаты. Тот вариант оплаты, который Вы рекомендуете
   * использовать своим покупателям (если не задано, то по умолчанию открывается
   * оплата Банковской картой). Если параметр указан, то покупатель при переходе
   * на сайт Robokassa попадёт на страницу оплаты с выбранным способом оплаты.
   */
  IncCurrLabel: PaymentMethod;

  /**
   * Предлагаемый способ оплаты. В отличие от IncCurrLabel дает возможность
   * передать сразу несколько способов оплаты. В таком случае нужно передать
   * несколько параметров PaymentMethods с разными значениями. В случае
   * использования Iframe версии платежной страницы способ реализации описан
   * в соответствующем разделе.
   */
  PaymentMethods: PaymentMethod[];

  /**
   * Номер счета в магазине. Необязательный параметр, но мы настоятельно
   * рекомендуем его использовать. Значение этого параметра должно быть
   * уникальным для каждой оплаты. Может принимать значения
   * от 1 до 2147483647 (2^31 - 1).
   *
   * Если значение параметра пустое, или равно 0, или параметр вовсе не указан,
   * то при создании операции оплаты ему автоматически будет присвоено
   * уникальное значение.
   */
  InvId: number;

  /**
   * @enum Language
   *
   * @description Язык общения с клиентом (в соответствии с ISO 3166-1).
   * Определяет на каком языке будет страница Robokassa, на которую попадёт
   * покупатель. Если параметр не передан, то используются региональные настройки
   * браузера покупателя. Для значений отличных от ru или en используется
   * английский язык.
   */
  Culture: Language;

  /**
   *
   * @default Windows-1251
   * @description Кодировка, в которой отображается страница Robokassa.
   * Этот же параметр влияет на корректность отображения описания
   * покупки (Description) в интерфейсе Robokassa, и на правильность передачи
   * Дополнительных пользовательских параметров, если в их значениях
   * присутствует язык отличный от английского.
   */
  Encoding: string;

  /**
   * Если параметр передан, то email покупателя автоматически подставляется
   * в платёжную форму Robokassa.
   */
  Email: string;

  /**
   * Срок действия счета. Этот параметр необходим, чтобы запретить пользователю
   * оплату позже указанной магазином даты при выставлении счета.
   */
  ExpirationDate: Date;

  /**
   *
   * Передача этого параметра (Ip конечного пользователя) желательна для
   * усиления безопасности, предотвращению фрода и противодействию мошенникам.
   * Этот параметр пользователь передает при оплате. При расчете контрольной
   * суммы UserIp ставится перед "Пароль#1" (кроме использования параметра Receipt).
   */
  UserIp: string;

  /**
   * Передаётся вместе со всеми остальными параметрами для инициализации
   * платежа, а так же этот параметр, если передаётся, обязательно должен быть
   * включен в подсчёт контрольной суммы.
   *
   * В этом параметре передается информация о перечне товаров/услуг, количестве,
   * цене, налоговой ставке и ставке НДС по каждой позиции.
   */
  Receipt: Receipt;

  /**
   * В случае, если магазину необходимо иметь возможность холдирования денежных
   * средств — проведение операции делится на два этапа.
   *
   * На первом этапе пользователь производит обычный платеж по выставленному
   * счету, но в отличие от обычного платежа в запросе на холдирование
   * передается дополнительный параметр StepByStep со значением true.
   *
   * Уведомление об успешной предавторизации можно получить только используя
   * запрос ResultURL2
   */
  StepByStep: boolean;
};

export type CustomFields = {
  [Key in `${Prefixes}${string}`]: string | number;
};

export type Fields = RequiredFields & Partial<OptionalFields> & CustomFields;
export type SignaturePayload = Partial<
  Pick<RequiredFields, 'OutSum' | 'Description'>
> &
  Partial<
    Pick<
      OptionalFields,
      'InvId' | 'UserIp' | 'Culture' | 'Receipt' | 'StepByStep'
    >
  > &
  CustomFields;

export type CancelHoldDto = Pick<SignaturePayload, 'InvId' | 'OutSum'>;
export type CreatePaymentBySavedCardDto = SignaturePayload & {
  Token?: string;
  ResultUrl2?: string;
};
